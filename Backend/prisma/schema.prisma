generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modèle User pour l'authentification
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  role          String    @default("USER") // ADMIN, MANAGER, SUPPORT, USER
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orders        Order[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
}

// Modèle RefreshToken
model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @unique
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime  @default(now())
  ipAddress  String?
  deviceInfo String?
}

// Modèle AuditLog pour la traçabilité
model AuditLog {
  id         String   @id @default(uuid())
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  action     String
  entityType String?
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   String?  // JSON stocké comme string en SQLite
  createdAt  DateTime @default(now())
}

// Modèle Customer (clients WhatsApp)
model Customer {
  id                String    @id @default(uuid())
  whatsappId        String    @unique
  phoneNumber       String    @unique
  name              String
  email             String?
  city              String?
  address           String?
  preferredLanguage String    @default("fr") // fr, ar, en
  isBlocked         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  orders            Order[]
  messages          Message[]
}

// Modèle Product
model Product {
  id            Int         @id @default(autoincrement())
  name          String
  nameFr        String
  nameAr        String
  description   String?
  descriptionFr String?
  descriptionAr String?
  price         Float
  stock         Int         @default(0)
  category      String?
  imageUrl      String?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  orderItems    OrderItem[]
}

// Modèle Order
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  userId          Int?        // Admin qui a traité la commande
  user            User?       @relation(fields: [userId], references: [id])
  status          String      @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  total           Float
  shippingAddress String?
  shippingCity    String?
  shippingMethod  String?
  paymentStatus   String      @default("PENDING") // PENDING, PAID, FAILED
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  items           OrderItem[]
}

// Modèle OrderItem
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

// Modèle Message (WhatsApp)
model Message {
  id              String    @id @default(uuid())
  whatsappId      String    @unique
  customerId      String
  customer        Customer  @relation(fields: [customerId], references: [id])
  type            String    // TEXT, IMAGE, DOCUMENT, AUDIO, VIDEO
  content         String?
  mediaUrl        String?
  status          String    @default("RECEIVED") // RECEIVED, READ, REPLIED
  direction       String    // INBOUND, OUTBOUND
  isFromCustomer  Boolean   @default(true)
  metadata        String?   // JSON stocké comme string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}